class Solution {
    vector<int> vis; // 访问记录
    vector<vector<int>> ans; // 返回值
public:
    void backtrack(vector<int>& nums, int idx, vector<int>& perm) {
        if (idx == nums.size()) 
        { // 退出条件 满
            ans.emplace_back(perm);
            return;
        }
        for (int i = 0; i < (int)nums.size(); ++i) {
            if (vis[i] || (i > 0 && nums[i] == nums[i - 1] && vis[i - 1])) // 1.去除自身 2.前一个数字和现在的数字相同 3.上一次已经处理过该数字
            {
                continue;
            }
            perm.emplace_back(nums[i]);
            vis[i] = 1;
            backtrack(nums, idx + 1, perm);
            vis[i] = 0;
            perm.pop_back();
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) 
    {
        vector<int> perm;
        vis.resize(nums.size());
        sort(nums.begin(), nums.end());
        backtrack(nums, 0, perm);
        return ans;
    }
};